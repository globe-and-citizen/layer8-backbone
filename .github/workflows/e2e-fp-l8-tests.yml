name: End-to-end tests for Frontend->FP->RP->Backend
on: [pull_request]
jobs:
  run-e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upgrade node
        uses: actions/setup-node@v4
        with:
          node-version: "23.x" # Recommend using LTS version (20.x) instead of 23.x

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config git make
          # sudo usermod -a -G docker $USER
          # newgrp docker

      - name: Build Forward Proxy
        run: |
          cd forward-proxy && cargo update && cargo build && touch .env && echo "JWT_SECRET_KEY=ThisIsASecret" > .env

      - name: Build Reverse Proxy
        run: |
          cd reverse-proxy && cargo update && cargo build

      - name: Run services and test
        run: |
          # Install dependencies
          npm i -g concurrently

          # Start services in background
          concurrently "cd forward-proxy && cargo run" "cd reverse-proxy && cargo run" "cd backend && npm i && node index.js" &

          # Wait for services to be fully ready with proper health checks
          echo "Waiting for services to start..."

          # Backend services
          curl --retry 20 --retry-delay 2 --retry-connrefused http://localhost:3000/health -s -o /dev/null
          curl --retry 20 --retry-delay 2 --retry-connrefused http://localhost:6191/health -s -o /dev/null
          curl --retry 20 --retry-delay 2 --retry-connrefused http://localhost:6193/health -s -o /dev/null

          # Test API connectivity
          echo "Testing API connectivity..."
          API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            --location 'http://localhost:6191/test-endpoint' \
            --header 'Content-Type: application/json' \
            --data '{"data": "Test Message"}')
          if [ "$API_RESPONSE" -ne 200 ]; then
            echo "API test failed with status $API_RESPONSE"
            exit 1
          fi
          echo "Successfully tested connection between FP->RP->Backend"

          # Clone layer8 Repo
          cd /home/runner
          mkdir app-test
          cd app-test
          git clone https://github.com/globe-and-citizen/layer8.git

          # Setup layer8
          cd layer8
          # TODO:Temporary usage of sp-pub-key branch, to use main onece merged
          git switch hmk/sp-pub-key
          make go_mod_tidy
          make setup_and_run &

          # Wait for service to be fully ready with proper health checks
          for attempt in {1..30}; do sleep 2; if curl -s http://localhost:5001/ > /dev/null; then break; fi; done
          sleep 15

          # Test that the backend (with port 8000) is registered with layer8
          curl --location 'http://localhost:6191/init-tunnel?backend_url=localhost%3A8000' --header 'Content-Type: application/json' --data '{"data": "test"}' -o /dev/null -w "Status: %{http_code}" | grep -q "200"
          if [ $? -eq 0 ]; then
            echo "Successfully tested connection between FP->L8->FP->RP->Backend"
          else
            echo "Failed to test connection between RP->L8"
            exit 1
          fi

          # Test that the backend (with port 8001) is not registered with layer8
          # curl --location 'http://localhost:6191/init-tunnel?backend_url=localhost%3A8001' --header 'Content-Type: application/json' --data '{"data": "test"}' -o /dev/null -w "Status: %{http_code}" | grep -q "500" || true
          # if [ $? -eq 0 ]; then
          #   echo "Successfully tested that backend 8001 is not registered with layer8"
          # else
          #   echo "Failed to test that backend 8001 is not registered with layer8"
          #   exit 1
          # fi
